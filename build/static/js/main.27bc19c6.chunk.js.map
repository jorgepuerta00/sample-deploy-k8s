{"version":3,"sources":["Utils/Common.tsx","Utils/PrivateRoute.tsx","Utils/PublicRoute.tsx","Constants/apiEndpoints.ts","Hooks/useGetUser.ts","Constants/firebase.ts","Hooks/useSignIn.ts","Hooks/useCreateUser.ts","Hooks/useVerifyToken.ts","Components/NavBar/NavBar.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["getUser","userStr","sessionStorage","getItem","JSON","parse","getToken","removeUserSession","removeItem","setUserSession","token","user","setItem","stringify","PrivateRoute","Component","component","exact","path","props","render","matchProps","to","pathname","state","from","location","PublicRoute","forceRedirect","redirectTo","API_URL","config","headers","Authorization","ApiEndPoints","createUser","getUserById","verifyIdToken","useGetUser","React","data","setData","loading","setLoading","error","setError","api","axios","create","baseURL","uid","a","get","then","response","catch","console","warn","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","UseSignIn","setUser","setToken","username","password","signInWithEmailAndPassword","ya","message","useCreateUser","result","post","useVerifyToken","e","NavBar","className","activeClassName","Login","lazy","Dashboard","Home","App","fetchData","useEffect","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.27bc19c6.chunk.js","sourcesContent":["// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n\n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n\n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n\n// set the token and user from the session storage\nexport const setUserSession = (token: string, user: string) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}","import React, { ComponentType } from 'react'\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\n\nimport { getToken } from './Common';\n\ninterface PrivateRouteProps extends RouteProps {\n  component: ComponentType<any>;\n  exact?: any;\n  path: string;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({\n  component: Component,\n  exact,\n  path,\n  ...props\n}) => {\n\n  return (\n    <Route\n      {...props}\n      exact={exact}\n      path={path} \n      render={(matchProps: any) => getToken() ? <Component {...matchProps} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nexport default PrivateRoute;","import React, { FC, ComponentType } from 'react';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\n\nimport { getToken } from './Common';\n\ninterface PublicRouteProps extends RouteProps {\n  component: ComponentType<any>;\n  forceRedirect?: boolean;\n  redirectTo?: string;\n  path: string;\n}\n\nconst PublicRoute: FC<PublicRouteProps> = ({\n  component: Component,\n  forceRedirect,\n  redirectTo,\n  path,\n  ...props\n}) => {\n  return (\n    <Route\n      {...props}\n      render={(props) => !getToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/dashboard' }} />}\n    />\n  )\n};\n\nexport default PublicRoute;","const API_URL = 'https://users-l7rh776aha-uc.a.run.app/api'\n\nconst config = {\n  headers: { Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkplbiBKb25lcyIsImlhdCI6MTU5MDExNzY2OH0.Z50ZjBVzVA8l5Lxzjku2q1edyOPboUEOMLOYufsSGm0` }\n};\n\nconst ApiEndPoints = {\n  users: {\n    createUser: 'users',\n    getUserById: 'users/',\n    verifyIdToken: 'users/verifyIdToken/'\n  }\n};\n\nexport {\n  API_URL,\n  ApiEndPoints,\n  config\n};","import * as React from 'react';\nimport axios from \"axios\";\nimport { API_URL, ApiEndPoints, config } from '../Constants/apiEndpoints';\n \nconst useGetUser = () => {\n  const [data, setData] = React.useState<IUser>();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const api = axios.create({ baseURL: API_URL });\n\n  const fetchData = async (uid: string) => {\n    try {\n      setLoading(true)\n      setError(\"\")\n      await api.get(`${ApiEndPoints.users.getUserById}${uid}`, config)\n      .then(response => {\n        setData(response.data.data)\n      })\n      .catch(error => {\n        setError(\"Error retriving data from database.\")\n      });\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setLoading(false)\n    }\n  };\n\n  return [loading, data, error, fetchData] as const;\n}\n\ninterface IUser {\n  id: string,\n  documentnumber: string,\n  documenttype: string,\n  firstname: string,\n  lastname: string,\n  email: string,\n  age: string,\n  score: string\n}\n\nexport default useGetUser","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyApaIbCPZIEyJVjlNwzUZZDUpHI_KwOOjE\",\n  authDomain: \"sample-microservice-oiga.firebaseapp.com\",\n  projectId: \"sample-microservice-oiga\",\n  storageBucket: \"sample-microservice-oiga.appspot.com\",\n  messagingSenderId: \"913926175112\",\n  appId: \"1:913926175112:web:56d9a596586e0d0528a23d\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth()\n\nexport { auth, firebase as default }","import * as React from 'react';\nimport firebase from './../Constants/firebase';\n\nconst UseSignIn = () => {\n  const [loading, setLoading] = React.useState(false);\n  const [user, setUser] = React.useState<any>();\n  const [token, setToken] = React.useState<string>(\"\");\n  const [error, setError] = React.useState<string>();\n\n  const firebaseSignIn = async (username: string, password: string) => {\n    try {\n      setLoading(true)\n      setError(\"\")\n\n      await firebase.auth().signInWithEmailAndPassword(username, password)\n      .then((response: any) => {\n        setToken(response.user.ya);\n        setUser(response.user);\n      }).catch((error: any) => {\n        if (error != null) setError(error.message);\n        else setError(\"Something went wrong. Please try again later.\");\n      });\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return [loading, token, user, error, firebaseSignIn] as const;\n}\n\nexport default UseSignIn","import * as React from 'react';\nimport axios from \"axios\";\nimport { API_URL, ApiEndPoints, config } from '../Constants/apiEndpoints';\n \nconst useCreateUser = () => {\n  const [result, setData] = React.useState<string>();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const api = axios.create({ baseURL: API_URL });\n\n  const createUser = async (data: IUser) => {\n    try {\n      setLoading(true)\n      setError(\"\")\n      await api.post(`${ApiEndPoints.users.createUser}`, data, config)\n      .then(response => {\n        setData(\"Saved succesfully!\")\n      })\n      .catch(error => {\n        setError(\"Error saving to database.\")\n      });\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setLoading(false)\n    }\n  };\n\n  return [loading, result, error, createUser] as const;\n}\n\ninterface IUser {\n  firstname: string,\n  lastname: string,\n  email: string,\n  age: string,\n  score: string\n}\n\nexport default useCreateUser","import * as React from 'react';\nimport axios from \"axios\";\nimport { API_URL, ApiEndPoints, config } from '../Constants/apiEndpoints';\n\nimport { removeUserSession, setUserSession, getToken } from './../Utils/Index';\n \nconst useVerifyToken = () => {\n  const [loading, setLoading] = React.useState(false);\n\n  const api = axios.create({ baseURL: API_URL });\n\n  const fetchData = () => {\n    try {\n      const token = getToken();\n\n      if (!token) {\n        return;\n      }\n\n      setLoading(true)\n      api.get(`${ApiEndPoints.users.verifyIdToken}${token}`, config)\n      .then(response => {\n        setUserSession(token, response.data.data);\n      })\n      .catch(error => {\n        removeUserSession();\n      });\n    } catch (e) {\n      console.warn(e);\n    } finally {\n      setLoading(false)\n    }\n  };\n\n  return [loading, fetchData] as const;\n}\n\nexport default useVerifyToken","import React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nexport interface INavBarProps { \n  props?: any\n}\n\nconst NavBar: React.FC<INavBarProps> = ({ \n  props\n}) => {\n  return (\n    <div className=\"header\">\n      <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\n      <NavLink activeClassName=\"active\" to=\"/login\">Login</NavLink><small>(Access without token only)</small>\n      <NavLink activeClassName=\"active\" to=\"/dashboard\">Dashboard</NavLink><small>(Access with token only)</small>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, { useEffect, lazy, Suspense } from 'react';\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom';\n\n// Components\nimport { NavBar } from './Components/Index'\n\n// Routes\nimport { PrivateRoute, PublicRoute } from './Utils/Index';\n\n// Hooks\nimport { useVerifyToken } from './Hooks/Index';\n\n// core components\nconst Login = lazy(() => import(\"./Views/Containers/Login\"));\nconst Dashboard = lazy(() => import(\"./Views/Containers/Dashboard\"));\nconst Home = lazy(() => import(\"./Views/Containers/Home\"));\n\nfunction App() {\n\n  const [ loading, fetchData ] = useVerifyToken()\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  if (loading) {\n    return <div className=\"content\">Checking Authentication...</div>\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Suspense fallback={<div>Loading...</div>}>\n        <div>\n          <NavBar />\n          <div className=\"content\">\n            <Switch>\n              <Route exact path=\"/index\" component={Home} />\n              <PublicRoute path=\"/login\" component={Login} />\n              <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n              <Redirect from=\"/\" to=\"/index\" />\n            </Switch>\n          </div>\n        </div>\n        </Suspense>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Assets/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}